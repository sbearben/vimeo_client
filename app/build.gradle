apply plugin: 'com.android.application'
apply from: '../config/quality/quality.gradle'
//TODO uncomment line below after adding fabric api secret and key to fabric.properties
//apply plugin: 'io.fabric'

android {
    compileSdkVersion 27
    buildToolsVersion '28.0.2'

    defaultConfig {
        applicationId 'uk.co.victoriajanedavis.viemo_sdk_test'
        minSdkVersion 19
        targetSdkVersion 27
        testInstrumentationRunner "${applicationId}.runner.RxAndroidJUnitRunner"
        versionCode 1000
        // Major -> Millions, Minor -> Thousands, Bugfix -> Hundreds. E.g 1.3.72 == 1,003,072
        versionName '0.1.0'

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath true
            }
        }

        vectorDrawables {
            useSupportLibrary true
        }

        if (System.getenv().containsKey("IS_CI_JOB")) {
            buildConfigField("String", "CLIENT_ID", "\"" + System.getenv("CI_CLIENT_ID") + "\"")
            buildConfigField("String", "CLIENT_SECRET", "\"" + System.getenv("CI_CLIENT_SECRET") + "\"")
            buildConfigField("String", "OAUTH_REDIRECT", "\"" + System.getenv("CI_OAUTH_REDIRECT") + "\"")
        } else {
            buildConfigField("String", "CLIENT_ID", "\"${vimeoClientId}\"")
            buildConfigField("String", "CLIENT_SECRET", "\"${vimeoClientSecret}\"")
            buildConfigField("String", "OAUTH_REDIRECT", "\"${vimeoOauthRedirect}\"")
        }
    }

    signingConfigs {
        // You must set up an environment var before release signing
        // Run: export APP_KEY={password}
        // TODO Add your release keystore in /keystore folder
        release {
            storeFile file('keystore/release.keystore')
            keyAlias 'alias'
            storePassword "$System.env.APP_KEY"
            keyPassword "$System.env.APP_KEY"
        }

        debug {
            storeFile file('keystore/debug.keystore')
            keyAlias 'androiddebugkey'
            storePassword 'android'
            keyPassword 'android'
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release

            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            ext.betaDistributionReleaseNotesFilePath =
                    file('../crashlytics_release_notes.txt').absolutePath
        }

        debug {
            versionNameSuffix " Debug"
            debuggable true
        }
    }

    sourceSets {
        def commonTestDir = 'src/commonTest/java'
        test {
            java.srcDir commonTestDir
        }
        androidTest {
            java.srcDir commonTestDir
        }
    }

    //Needed because of this https://github.com/square/okio/issues/58
    lintOptions {
        warning 'InvalidPackage'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    final PLAY_SERVICES_VERSION = '15.0.1'
    final SUPPORT_LIBRARY_VERSION = '27.1.1'
    final RETROFIT_VERSION = '2.3.0'
    final DAGGER_VERSION = '2.5'
    final MOCKITO_VERSION = '2.6.2'
    final HAMCREST_VERSION = '1.3'
    final ESPRESSO_VERSION = '2.2.1'
    final RUNNER_VERSION = '0.4'
    final BUTTERKNIFE_VERSION = '8.4.0'

    def daggerCompiler = "com.google.dagger:dagger-compiler:$DAGGER_VERSION"
    def jUnit = "junit:junit:4.12"
    def mockito = "org.mockito:mockito-core:$MOCKITO_VERSION"

    // App Dependencies
    implementation "com.google.android.gms:play-services-gcm:$PLAY_SERVICES_VERSION"
    implementation "com.android.support:appcompat-v7:$SUPPORT_LIBRARY_VERSION"
    implementation "com.android.support:recyclerview-v7:$SUPPORT_LIBRARY_VERSION"
    implementation "com.android.support:cardview-v7:$SUPPORT_LIBRARY_VERSION"
    implementation "com.android.support:support-annotations:$SUPPORT_LIBRARY_VERSION"
    implementation "com.android.support:design:$SUPPORT_LIBRARY_VERSION"
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'

    //Architecture Components
    implementation "android.arch.lifecycle:extensions:1.1.1"
    //Paging
    implementation "android.arch.paging:runtime:1.0.0"

    implementation "com.squareup.retrofit2:retrofit:$RETROFIT_VERSION"
    implementation "com.squareup.retrofit2:converter-gson:$RETROFIT_VERSION"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$RETROFIT_VERSION"
    implementation 'com.squareup.okhttp3:logging-interceptor:3.10.0'

    // LeakCanary
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.1'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.1'
    // Optional, if you use support library fragments:
    debugImplementation 'com.squareup.leakcanary:leakcanary-support-fragment:1.6.1'

    implementation 'com.github.bumptech.glide:glide:4.7.1'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.7.1'
    implementation ("com.github.bumptech.glide:recyclerview-integration:4.7.1") {
        // Excludes the support library because it's already included by Glide.
        transitive = false
    }
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.14'
    implementation 'com.jakewharton.rxbinding2:rxbinding:2.1.1'
    implementation ('com.crashlytics.sdk.android:crashlytics:2.5.7@aar') {
        transitive = true;
    }
    implementation 'com.jakewharton.rxrelay2:rxrelay:2.1.0'

    implementation 'com.jakewharton.timber:timber:4.1.2'
    implementation "com.jakewharton:butterknife:$BUTTERKNIFE_VERSION"
    annotationProcessor "com.jakewharton:butterknife-compiler:$BUTTERKNIFE_VERSION"

    implementation  "com.google.dagger:dagger:$DAGGER_VERSION"
    compileOnly 'org.glassfish:javax.annotation:10.0-b28' //Required by Dagger2
    annotationProcessor daggerCompiler
    testAnnotationProcessor daggerCompiler
    androidTestAnnotationProcessor daggerCompiler

    // Unit tests dependencies
    testImplementation jUnit
    testImplementation mockito
}

// Log out test results to console
tasks.matching {it instanceof Test}.all {
    testLogging.events = ["failed", "passed", "skipped"]
}
